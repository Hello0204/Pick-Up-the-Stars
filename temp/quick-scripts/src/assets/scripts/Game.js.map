{"version":3,"sources":["assets\\scripts\\Game.js"],"names":["cc","Class","Component","properties","starPrefab","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","AudioClip","spawnNewStar","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","game","starDuration","Math","random","timer","randX","randY","groundY","jumpHeight","maxX","width","v2","gameOver","stopAllActions","director","loadScene","onLoad","y","height","score","start","update","dt","gainScore","string","toString","audioEngine","playEffect"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // This property quotes the PreFab resource of stars\r\n        starPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n\r\n        // The random scale of disappearing time for stars\r\n        maxStarDuration: 0,\r\n        minStarDuration: 0,\r\n\r\n        // Ground node for confirming the height of the generated star's position\r\n        ground: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n\r\n        // Player node for obtaining the jump height of the main character and controlling the movement switch of the main character\r\n        player: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n\r\n        // Reference of score label\r\n        scoreDisplay: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n\r\n        // Scoring sound effect resource\r\n        scoreAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        }\r\n    },\r\n\r\n    spawnNewStar: function() {\r\n        // Generate a new node in the scene with a preset template\r\n        var newStar = cc.instantiate(this.starPrefab);\r\n        // Put the newly added node under the Canvas node\r\n        this.node.addChild(newStar);\r\n        // Set up a random position for the star\r\n        newStar.setPosition(this.getNewStarPosition());\r\n\r\n        // Save a reference of the Game object on the Star script component\r\n        newStar.getComponent('Star').game = this;\r\n\r\n        // Reset timer, randomly choose a value according the scale of star duration\r\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\r\n        this.timer = 0;\r\n    },\r\n\r\n    getNewStarPosition: function () {\r\n        var randX = 0;\r\n        // According to the position of the ground level and the main character's jump height, randomly obtain an anchor point of the star on the y axis\r\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\r\n        // According to the width of the screen, randomly obtain an anchor point of star on the x axis\r\n        var maxX = this.node.width/2;\r\n        randX = (Math.random() - 0.5) * 2 * maxX;\r\n        // Return to the anchor point of the star\r\n        return cc.v2(randX, randY);\r\n    },\r\n\r\n    gameOver: function () {\r\n        // Stop the jumping action of the Player node\r\n        this.player.stopAllActions(); \r\n        // reload the \"game\" scene\r\n        cc.director.loadScene('game');\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad: function () {\r\n        // Obtain the anchor point of ground level on the y axis\r\n        this.groundY = this.ground.y + this.ground.height/2; // \"this.ground.top\" may also work\r\n        // Generate a new star\r\n        this.spawnNewStar();\r\n\r\n        // Initialize timer\r\n        this.timer = 0;\r\n        this.starDuration = 0;\r\n\r\n        // Initialize scoring\r\n        this.score = 0;\r\n        \r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update: function (dt) {\r\n        // Update timer for each frame, when a new star is not generated after exceeding duration\r\n\r\n        // Invoke the logic of game failure\r\n        if (this.timer > this.starDuration) {\r\n            this.gameOver();\r\n            return;\r\n        }\r\n        this.timer += dt;\r\n    },\r\n\r\n    gainScore: function () {\r\n        this.score += 1;\r\n        // Update the words of the scoreDisplay Label\r\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\r\n        // Play the scoring sound effect\r\n        cc.audioEngine.playEffect(this.scoreAudio, false);\r\n    },\r\n    \r\n});\r\n"]}